package org.example.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDate;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import org.example.model.IndexFund;

/**
 * Class _Order was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Order extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<LocalDate> DATE = Property.create("date", LocalDate.class);
    public static final Property<Boolean> PURCHASE = Property.create("purchase", Boolean.class);
    public static final Property<BigDecimal> SHARE_PRICE = Property.create("sharePrice", BigDecimal.class);
    public static final Property<BigDecimal> SHARE_QUANTITY = Property.create("shareQuantity", BigDecimal.class);
    public static final Property<IndexFund> INDEX_FUND = Property.create("indexFund", IndexFund.class);

    protected LocalDate date;
    protected Boolean purchase;
    protected BigDecimal sharePrice;
    protected BigDecimal shareQuantity;

    protected Object indexFund;

    public void setDate(LocalDate date) {
        beforePropertyWrite("date", this.date, date);
        this.date = date;
    }

    public LocalDate getDate() {
        beforePropertyRead("date");
        return this.date;
    }

    public void setPurchase(boolean purchase) {
        beforePropertyWrite("purchase", this.purchase, purchase);
        this.purchase = purchase;
    }

	public boolean isPurchase() {
        beforePropertyRead("purchase");
        if(this.purchase == null) {
            return false;
        }
        return this.purchase;
    }

    public void setSharePrice(BigDecimal sharePrice) {
        beforePropertyWrite("sharePrice", this.sharePrice, sharePrice);
        this.sharePrice = sharePrice;
    }

    public BigDecimal getSharePrice() {
        beforePropertyRead("sharePrice");
        return this.sharePrice;
    }

    public void setShareQuantity(BigDecimal shareQuantity) {
        beforePropertyWrite("shareQuantity", this.shareQuantity, shareQuantity);
        this.shareQuantity = shareQuantity;
    }

    public BigDecimal getShareQuantity() {
        beforePropertyRead("shareQuantity");
        return this.shareQuantity;
    }

    public void setIndexFund(IndexFund indexFund) {
        setToOneTarget("indexFund", indexFund, true);
    }

    public IndexFund getIndexFund() {
        return (IndexFund)readProperty("indexFund");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "date":
                return this.date;
            case "purchase":
                return this.purchase;
            case "sharePrice":
                return this.sharePrice;
            case "shareQuantity":
                return this.shareQuantity;
            case "indexFund":
                return this.indexFund;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "date":
                this.date = (LocalDate)val;
                break;
            case "purchase":
                this.purchase = (Boolean)val;
                break;
            case "sharePrice":
                this.sharePrice = (BigDecimal)val;
                break;
            case "shareQuantity":
                this.shareQuantity = (BigDecimal)val;
                break;
            case "indexFund":
                this.indexFund = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.date);
        out.writeObject(this.purchase);
        out.writeObject(this.sharePrice);
        out.writeObject(this.shareQuantity);
        out.writeObject(this.indexFund);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.date = (LocalDate)in.readObject();
        this.purchase = (Boolean)in.readObject();
        this.sharePrice = (BigDecimal)in.readObject();
        this.shareQuantity = (BigDecimal)in.readObject();
        this.indexFund = in.readObject();
    }

}
